{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAUA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AACXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH;;;;oDAEsB;AACnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,aAAK;AACzB,oCAAG,CAAChB,UAAJ,EAAe;AACXA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAW;AAC1B;AACA,8CAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACH,qCAHD;AAIH;AACDE,wCAAQL,UAAR;AACH,6BAVD;;AAYAO,wCAAYW,OAAZ,GAAsB,aAAK;AACvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,6BAHD;AAKH,yBAzBM,CAAP;AA0BH;;;kDAEoBtB,U,EAAY;AAC7BH,+BAAO0B,OAAP,CAAe,iBAAS;AACpB,gCAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD1B,WAAW2B,iBAAX,CAA6BD,KAA7B;;AAEjD1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,yBAJD;AAKH;;;sDACwB;AACrB5B;AACAD,qCAAa,IAAb;AACH","file":"ConnectionFactory.js","sourcesContent":["    const stores = ['negociacoes'];\r\n    const version = 4;\r\n    const dbName = 'aluraframe';\r\n    let connection = null;\r\n    let close = null;\r\n\r\n    export class ConnectionFactory {\r\n\r\n        constructor() {\r\n            throw new Error('Não é possível instanciar ConnectionFactory');\r\n        }\r\n\r\n        static getConnection() {\r\n            return new Promise((resolve, reject) => {\r\n\r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n                    ConnectionFactory._createStores(e.target.result);\r\n                }\r\n\r\n                openRequest.onsuccess = e => {\r\n                    if(!connection){\r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function (){\r\n                            //monkey patch\r\n                            throw new Error('Você não pode fechar diretamente a conexão.')\r\n                        }\r\n                    }\r\n                    resolve(connection);\r\n                }\r\n\r\n                openRequest.onerror = e => {\r\n                    console.log(e.target.error);\r\n                    reject(e.target.error.name);\r\n                }\r\n\r\n            })\r\n        }\r\n\r\n        static _createStores(connection) {\r\n            stores.forEach(store => {\r\n                if (connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\r\n\r\n                connection.createObjectStore(store, { autoIncrement: true })\r\n            })\r\n        }\r\n        static closeConnection() {\r\n            close();\r\n            connection = null;\r\n        }\r\n\r\n    }\r\n"]}